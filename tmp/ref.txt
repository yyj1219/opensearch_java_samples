import org.elasticsearch.action.search.SearchRequest;
import org.elasticsearch.action.search.SearchResponse;
import org.elasticsearch.action.support.IndicesOptions;
import org.elasticsearch.client.RequestOptions;
import org.elasticsearch.index.query.QueryBuilder;
import org.elasticsearch.index.query.QueryBuilders;
import org.elasticsearch.search.SearchHit;
import org.elasticsearch.search.builder.SearchSourceBuilder;
import scouter.config.CommonConfigure;
import scouter.lang.pack.CloudObjectPack;
import scouter.lang.value.BooleanValue;
import scouter.server.Logger;
import tuna.server.db.common.elastic.ConnectionManager;
import tuna.server.db.rd.ICloudAgentRD;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class CloudAgentESRD implements ICloudAgentRD {

    private CommonConfigure conf;

    public CloudAgentESRD() {
        this.conf = CommonConfigure.getInstance();
    }

    @Override
    public List<CloudObjectPack> getCloudAgentList() {
        List<CloudObjectPack> result = new ArrayList<>();
        SearchRequest searchRequest = new SearchRequest("cloud-agent");

        QueryBuilder queryBuilder = QueryBuilders.boolQuery()
                .filter(QueryBuilders.termQuery("active", "Y"));
        SearchSourceBuilder sourceBuilder = new SearchSourceBuilder();
        sourceBuilder.size(conf.es_query_fetch_size);

        if (conf.print_es_query) {
            Logger.println(queryBuilder.toString());
        }

        sourceBuilder.query(queryBuilder);
        searchRequest.source(sourceBuilder);
        searchRequest.indicesOptions(IndicesOptions.LENIENT_EXPAND_OPEN);

        try {
            SearchResponse searchResponse = ConnectionManager.getInstance().getReadClient().search(searchRequest, RequestOptions.DEFAULT);
            for (SearchHit hit : searchResponse.getHits().getHits()) {
                CloudObjectPack objectPack = new CloudObjectPack();
                objectPack.objHash = (int) hit.getSourceAsMap().get("objectId");
                objectPack.objName = (String) hit.getSourceAsMap().get("objectName");
                objectPack.address = (String) hit.getSourceAsMap().get("ipAddress");
                objectPack.port = (int) hit.getSourceAsMap().get("port");
                objectPack.alive = hit.getSourceAsMap().get("active").equals("Y") ? true : false;
                objectPack.wakeup = (long) hit.getSourceAsMap().get("wakeupTime");
                for (Map<String,Object> tag : (List<Map<String,Object>>)hit.getSourceAsMap().get("tags")) {
                    String key = (String) tag.get("key");
                    Object value = tag.get("value");
                    if (value instanceof String) {
                        objectPack.tags.put(key, (String) value);
                    } else if (value instanceof Number) {
                        objectPack.tags.put(key, ((Number) value).longValue());
                    } else if (value instanceof Boolean) {
                        objectPack.tags.put(key, new BooleanValue((boolean) value));
                    }
                }
                result.add(objectPack);
            }
        } catch (IOException e) {
            Logger.println("cloud-agent-001",e);
        }
        return result;
    }
}
