package tuna.server.db.rd.opensearch;

import org.json.simple.JSONArray;
import org.opensearch.client.opensearch.OpenSearchClient;
import org.opensearch.client.opensearch._types.FieldValue;
import org.opensearch.client.opensearch._types.SortOrder;
import org.opensearch.client.opensearch._types.query_dsl.BoolQuery;
import org.opensearch.client.opensearch._types.query_dsl.Query;
import org.opensearch.client.opensearch._types.query_dsl.TermQuery;
import org.opensearch.client.opensearch.core.SearchRequest;
import org.opensearch.client.opensearch.core.SearchResponse;
import org.opensearch.client.opensearch.core.search.Hit;
import org.opensearch.client.opensearch.core.search.SourceConfig;
import org.opensearch.client.opensearch.core.search.SourceFilter;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import scouter.config.CommonConfigure;
import scouter.server.Logger;
import tuna.server.db.common.opensearch.OpenSearchConnectionManager;
import tuna.server.db.rd.ICloudConfigRD;

import java.io.IOException;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.stream.Collectors;

public class CloudConfigOschRD  {

    private CommonConfigure conf;

    public CloudConfigOschRD() {
        this.conf = CommonConfigure.getInstance();
    }

    public Map<String, Object> getAgent(int id) {
        OpenSearchClient client = OpenSearchConnectionManager.getInstance().getReadClient();

        Query query = BoolQuery.of(b -> b
                .filter(f -> f
                        .term(t -> t
                                .field("objectId")
                                .value(FieldValue.of(id))
                        )
                )
        ).toQuery();

        SourceConfig sourceConfig = SourceConfig.of(sc -> sc
                .filter(SourceFilter.of(sf -> sf
                        .includes("objectId", "active", "account", "ipAddress", "port")
                        .excludes("wakeupTime", "updateDate")
                )));

        SearchRequest request = SearchRequest.of(s -> s
                .index("cloud-agent")
                .query(query)
                .size(conf.es_query_fetch_size)
                .source(sourceConfig)
        );

        if (conf.print_es_query) {
            Logger.println(request.toString());
        }

        try {
            SearchResponse<Map> response = client.search(request, Map.class);
            if (!response.hits().hits().isEmpty()) {
                return response.hits().hits().get(0).source();
            }
        } catch (IOException e) {
            Logger.println("cloud-config-001", e);
        }
        return null;
    }

    public JSONArray getCredential(String cspName, String name) {
        JSONArray jsonArray = new JSONArray();
        OpenSearchClient client = Objects.requireNonNull(OpenSearchConnectionManager.getInstance()).getReadClient();

        Query query = BoolQuery.of(b -> b
                .filter(f -> f
                        .term(t -> t.field("csp").value(FieldValue.of(cspName)))
                )
                .filter(f -> f
                        .term(t -> t.field("name").value(FieldValue.of(name)))
                )
        ).toQuery();

        String[] includeFields;
        switch (cspName) {
            case "AWS":
                Arrays.asList("name", "csp", "accessKeyId", "secretAccessKey");
                includeFields = new String[]{"name", "csp", "accessKeyId", "secretAccessKey"};
                break;
            case "GCP":
                includeFields = new String[]{"name", "csp", "projectId", "region", "keyFile"};
                break;
            case "Azure":
                includeFields = new String[]{"name", "csp", "subscriptionId", "tenantId", "clientId", "clientSecret", "resourceGroupName", "location"};
                break;
            default:
                includeFields = new String[]{};
        }

        SearchRequest request = SearchRequest.of(s -> s
                .index("cloud-credential")
                .query(query)
                .size(conf.es_query_fetch_size)
                .source(SourceConfig.of(sc -> sc
                        .filter(SourceFilter.of(sf -> sf
                                .includes(Arrays.asList(includeFields))
                        ))
                ))
        );

        if (conf.print_es_query) {
            Logger.println(request.toString());
        }

        try {
            SearchResponse<Map> response = client.search(request, Map.class);
            List<Hit<Map>> hits = response.hits().hits();
            if (!hits.isEmpty()) {
                jsonArray.add(hits.get(0).source());
            }
        } catch (IOException e) {
            Logger.println("cloud-config-002", e);
        }
        return jsonArray;
    }

    private SearchResponse<Map> getCredentialList(String[] names) throws IOException {
        OpenSearchClient client = Objects.requireNonNull(OpenSearchConnectionManager.getInstance()).getReadClient();

        List<FieldValue> nameValues = Arrays.stream(names)
                .map(FieldValue::of)
                .collect(Collectors.toList());

        Query query = BoolQuery.of(b -> b
                .filter(f -> f
                        .terms(t -> t
                                .field("name")
                                .terms(v -> v.value(nameValues))
                        )
                )
        ).toQuery();

        String[] includeFields = {
                "name", "csp",
                "accessKeyId", "secretAccessKey",
                "projectId", "region", "keyFile",
                "subscriptionId", "tenantId", "clientId", "clientSecret", "resourceGroupName", "location"
        };

        SearchRequest request = SearchRequest.of(s -> s
                .index("cloud-credential")
                .query(query)
                .sort(so -> so.field(f -> f.field("name").order(SortOrder.Asc)))
                .size(conf.es_query_fetch_size)
                .source(SourceConfig.of(sc -> sc
                        .filter(SourceFilter.of(sf -> sf
                                .includes(Arrays.asList(includeFields))
                        ))
                ))
        );

        if (conf.print_es_query) {
            Logger.println(request.toString());
        }

        return client.search(request, Map.class);
    }    
}
